- git diff 			: file differents not yet staged
	- git diff "path/to/file"		: differences in a specific file
	- git diff --staged			: differences for files in staging area
	- git diff --cached			: differences for files in staging Ã¡rea
	- git diff <commit_1> <commit_2>
	- git diff <branch> 			: compares actual_branch with the specified branch
	- git diff --name-only 			: just shows names, not what changed inside the files

- git commit -m "message" 	: commit all tracked changes

- git status 			: show the state of your working directory
	- git status -s				: output in a short format
	- git status --ignored			: shows files in file .gitignore

- git add "file/path" 		: Add file(s) to staging area
	- git add .				: adds just new or modified files
	- git add -A				: also adds removed filed
	- git add -u				: just adds tracked files. Not new files. 
	- git add -n				: to see what changes will be added
	- git add --dry-run			: to see what changes will be added

- git checkout -b branch_name 	: create and switch to a new branch
- git checkout branch_name 	: swith to branch_name
- git commit --amend 		: modify last commit
- git push origin branch_name 	: Push changes to a remote
- git pull 			: Fetch and merge remote changes
- git rebase -i 		: Rebase iteractively, rewrite commit history
- git clone 			: Create local commit of a remote report
- git merge 			: merge branches together
- git log --stat		: show commit logs with stats
- git stash			: stash changes for later
- git stash pop			: apply and remove stashed changes
- git show commit_id		: show details about a commit
- git reset			: undo commit by moving branch reference
- git reset HEAD~1		: undo last commit, preserving changes locally
- git reset --hard		: reset to a previous commit, erasing all uncommited changes
- git format-patch -1 commit_id	: create a patch file for a specific commit
- git apply patch_file_name 	: apply changes from a patch file
- git branch			: list branches
- git branch -D branch_name	: delete a branch forcefully
- git revert			: undo commits by creating a new commit
- git cherry-pick commit_id 	: apply changes from a specific commit
